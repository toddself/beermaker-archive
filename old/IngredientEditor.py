#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Wed Jan 20 21:45:51 2010

# Copyright (C) 2010 Todd Kennedy <todd.kennedy@gmail.com>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import os
import sys
from decimal import Decimal, InvalidOperation

import wx

from models import Grain, Hop, Yeast, Extract, HoppedExtract, Water, Misc, Mineral, Fining, Spice, Herb
from db import DataStore


# begin wxGlade: extracode
# end wxGlade

newIngredient = os.path.abspath('img/icon.gif')
addInventory = os.path.abspath('img/icon.gif')
viewInventory = os.path.abspath('img/icon.gif')

class IngredientEditor(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: IngredientEditor.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_2 = wx.Panel(self, -1)
        self.panel_5 = wx.Panel(self.panel_2, -1, style=wx.SIMPLE_BORDER|wx.SUNKEN_BORDER|wx.TAB_TRAVERSAL)
        self.panel_4 = wx.Panel(self.panel_2, -1, style=wx.SIMPLE_BORDER|wx.SUNKEN_BORDER|wx.TAB_TRAVERSAL)
        self.panel_3 = wx.Panel(self.panel_2, -1, style=wx.SIMPLE_BORDER|wx.SUNKEN_BORDER|wx.TAB_TRAVERSAL)
        self.panel_1 = wx.Panel(self, -1, style=wx.SIMPLE_BORDER|wx.SUNKEN_BORDER|wx.TAB_TRAVERSAL)
        self.ingredientEditor_statusbar = self.CreateStatusBar(1, 0)
        
        # Tool Bar
        self.ingredientEditor_toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_TEXT)
        self.SetToolBar(self.ingredientEditor_toolbar)
        self.ingredientEditor_toolbar.AddLabelTool(100, "New Ingredient", wx.Bitmap(newIngredient,wx.BITMAP_TYPE_ANY), wx.Bitmap(newIngredient,wx.BITMAP_TYPE_ANY), wx.ITEM_NORMAL, "New Ingredient", "Add a new ingredient")
        self.ingredientEditor_toolbar.AddSeparator()
        self.ingredientEditor_toolbar.AddLabelTool(101, "Add to Inventory", wx.Bitmap(addInventory,wx.BITMAP_TYPE_ANY), wx.Bitmap(addInventory,wx.BITMAP_TYPE_ANY), wx.ITEM_NORMAL, "Add to Inventory", "Add this item to your inventory")
        self.ingredientEditor_toolbar.AddLabelTool(102, "View Inventory", wx.Bitmap(viewInventory,wx.BITMAP_TYPE_ANY), wx.Bitmap(viewInventory,wx.BITMAP_TYPE_ANY), wx.ITEM_NORMAL, "View Inventory", "View your inventory")
        # Tool Bar end
        self.topLevelCtrl = wx.ListCtrl(self.panel_1, -1, style=wx.LC_SINGLE_SEL|wx.SUNKEN_BORDER)
        self.middleLevelCtrl = wx.ListCtrl(self.panel_1, -1, style=wx.LC_SINGLE_SEL|wx.SUNKEN_BORDER)
        self.bottomLevelCtrl = wx.ListCtrl(self.panel_1, -1, style=wx.LC_SINGLE_SEL|wx.SUNKEN_BORDER)
        self.label_1 = wx.StaticText(self.panel_3, -1, "Name:")
        self.nameCtrl = wx.TextCtrl(self.panel_3, -1, "")
        self.label_2 = wx.StaticText(self.panel_3, -1, "Origin:")
        self.originCtrl = wx.TextCtrl(self.panel_3, -1, "")
        self.label_9 = wx.StaticText(self.panel_4, -1, "Color:")
        self.colorCtrl = wx.TextCtrl(self.panel_4, -1, "")
        self.label_9_copy_6 = wx.StaticText(self.panel_4, -1, "Potential:")
        self.potentialCtrl = wx.TextCtrl(self.panel_4, -1, "")
        self.label_9_copy = wx.StaticText(self.panel_4, -1, "Dry Yield Fine Grain")
        self.dyfgCtrl = wx.TextCtrl(self.panel_4, -1, "")
        self.label_9_copy_5 = wx.StaticText(self.panel_4, -1, "Coarse/Fine Difference:")
        self.coarseFineDifferenceCtrl = wx.TextCtrl(self.panel_4, -1, "")
        self.label_9_copy_1 = wx.StaticText(self.panel_4, -1, "Moisture")
        self.moistureCtrl = wx.TextCtrl(self.panel_4, -1, "")
        self.label_9_copy_4 = wx.StaticText(self.panel_4, -1, "Distatic Power:")
        self.diastaticPowerCtrl = wx.TextCtrl(self.panel_4, -1, "")
        self.label_9_copy_2 = wx.StaticText(self.panel_4, -1, "Max in Batch:")
        self.maxInBatchCtrl = wx.TextCtrl(self.panel_4, -1, "")
        self.mustMashCtrl = wx.CheckBox(self.panel_4, -1, "Must Mash")
        self.addAfterBoilCtrl = wx.CheckBox(self.panel_4, -1, "Add After Boil")
        self.label_10 = wx.StaticText(self.panel_5, -1, "Notes")
        self.notesCtrl = wx.TextCtrl(self.panel_5, -1, "", style=wx.TE_MULTILINE)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOOL, self.NewIngredient, id=100)
        self.Bind(wx.EVT_TOOL, self.AddInventory, id=101)
        self.Bind(wx.EVT_TOOL, self.ViewInventory, id=102)
        self.Bind(wx.EVT_TEXT, self.ItemChanged, self.nameCtrl)
        self.Bind(wx.EVT_TEXT, self.ItemChanged, self.originCtrl)
        self.Bind(wx.EVT_TEXT, self.ItemChanged, self.colorCtrl)
        self.Bind(wx.EVT_TEXT, self.ItemChanged, self.potentialCtrl)
        self.Bind(wx.EVT_TEXT, self.ItemChanged, self.dyfgCtrl)
        self.Bind(wx.EVT_TEXT, self.ItemChanged, self.coarseFineDifferenceCtrl)
        self.Bind(wx.EVT_TEXT, self.ItemChanged, self.moistureCtrl)
        self.Bind(wx.EVT_TEXT, self.ItemChanged, self.diastaticPowerCtrl)
        self.Bind(wx.EVT_TEXT, self.ItemChanged, self.maxInBatchCtrl)
        self.Bind(wx.EVT_CHECKBOX, self.ItemChanged, self.mustMashCtrl)
        self.Bind(wx.EVT_CHECKBOX, self.ItemChanged, self.addAfterBoilCtrl)
        self.Bind(wx.EVT_TEXT, self.ItemChanged, self.notesCtrl)
        # end wxGlade

        self.PopulateBrowser()


    def __set_properties(self):
        # begin wxGlade: IngredientEditor.__set_properties
        self.SetTitle("Ingredient Editor")
        self.SetSize((512, 793))
        self.ingredientEditor_statusbar.SetStatusWidths([-1])
        # statusbar fields
        ingredientEditor_statusbar_fields = [""]
        for i in range(len(ingredientEditor_statusbar_fields)):
            self.ingredientEditor_statusbar.SetStatusText(ingredientEditor_statusbar_fields[i], i)
        self.ingredientEditor_toolbar.Realize()
        # end wxGlade
        
        self.ttemModified = False
        db = DataStore()
        self.saveInterval = None
        self.ingredientType = 'grain'
        self.ingredientID = 0

    def __do_layout(self):
        # begin wxGlade: IngredientEditor.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(4, 4, 0, 0)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.topLevelCtrl, 1, wx.ALL|wx.EXPAND, 3)
        sizer_2.Add(self.middleLevelCtrl, 1, wx.ALL|wx.EXPAND, 3)
        sizer_2.Add(self.bottomLevelCtrl, 1, wx.ALL|wx.EXPAND, 3)
        self.panel_1.SetSizer(sizer_2)
        sizer_1.Add(self.panel_1, 1, wx.ALL|wx.EXPAND, 6)
        sizer_4.Add(self.label_1, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        sizer_4.Add(self.nameCtrl, 1, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        sizer_4.Add(self.label_2, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        sizer_4.Add(self.originCtrl, 1, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        self.panel_3.SetSizer(sizer_4)
        sizer_3.Add(self.panel_3, 0, wx.ALL|wx.EXPAND, 3)
        grid_sizer_1.Add(self.label_9, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        grid_sizer_1.Add(self.colorCtrl, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 3)
        grid_sizer_1.Add(self.label_9_copy_6, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        grid_sizer_1.Add(self.potentialCtrl, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 3)
        grid_sizer_1.Add(self.label_9_copy, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        grid_sizer_1.Add(self.dyfgCtrl, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 3)
        grid_sizer_1.Add(self.label_9_copy_5, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        grid_sizer_1.Add(self.coarseFineDifferenceCtrl, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 3)
        grid_sizer_1.Add(self.label_9_copy_1, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        grid_sizer_1.Add(self.moistureCtrl, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 3)
        grid_sizer_1.Add(self.label_9_copy_4, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        grid_sizer_1.Add(self.diastaticPowerCtrl, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 3)
        grid_sizer_1.Add(self.label_9_copy_2, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        grid_sizer_1.Add(self.maxInBatchCtrl, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 3)
        grid_sizer_1.Add(sizer_6, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_5.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_8.Add(self.mustMashCtrl, 1, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 3)
        sizer_8.Add(self.addAfterBoilCtrl, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 3)
        sizer_5.Add(sizer_8, 0, wx.EXPAND, 0)
        self.panel_4.SetSizer(sizer_5)
        sizer_3.Add(self.panel_4, 0, wx.ALL|wx.EXPAND, 3)
        sizer_9.Add(self.label_10, 0, wx.ALL|wx.ADJUST_MINSIZE, 3)
        sizer_9.Add(self.notesCtrl, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 3)
        self.panel_5.SetSizer(sizer_9)
        sizer_3.Add(self.panel_5, 1, wx.ALL|wx.EXPAND, 3)
        self.panel_2.SetSizer(sizer_3)
        sizer_1.Add(self.panel_2, 1, wx.ALL|wx.EXPAND, 3)
        self.SetSizer(sizer_1)
        self.Layout()
        self.SetSize((512, 793))
        # end wxGlade

    def _ClearFields(self):
        pass
        
    def _SaveItem(self):
        print self.ingredientID
        if self.ingredientType == "grain":
            self._SaveGrain()
        
        self.itemModified = False
        self.saveInterval = False

    def _SaveGrain(self):        
        if self.ingredientID:
            thisGrain = Grain.get(self.ingredientID)
        elif Grain.select(Grain.q.name==self.nameCtrl.GetValue()).count() > 0:
            # pop up dialogue
            pass
        else:
            thisGrain = Grain()
                
        if self.nameCtrl.IsModified():
            thisGrain.name = unicode(self.nameCtrl.GetValue())
        if self.originCtrl.IsModified():
            thisGrain.origin = unicode(self.originCtrl.GetValue())
        if self.colorCtrl.IsModified():
            thisGrain.color = Decimal(self.colorCtrl.GetValue*()).quantize(SRM_QUANT)        
        if self.potentialCtrl.IsModified():
            thisGrain.potential = Decimal(self.potentialCtrl.GetValue()).quanitze(SG_QUANT)
        if self.dyfgCtrl.IsModified():
            thisGrain.dry_yield_fine_grain = Decimal(self.dyfgCtrl.GetValue()).quantize(PERCENT_QUANT)
        if self.coarseFineDifferenceCtrl.IsModified():
            thisGrain.coarse_fine_difference =  Decimal(self.coarseFineDifferenceCtrl.GetValue()).quantize(PERCENT_QUANT)
        if self.moistureCtrl.IsModified():
            thisGrain.moisture =  Decimal(self.moistureCtrl.GetValue()).quantize(PERCENT_QUANT)
        if self.diastaticPowerCtrl.IsModified():
            thisGrain.diastatic_power = Decimal(self.diastaticPowerCtrl.GetValue()).quantize(Decimal(10) ** -1)
        if self.maxInBatchCtrl.IsModified():
            thisGrain.max_in_batch = Decimal(self.maxInBatchCtrl.GetValue()).quantize(PERCENT_QUANT)
        if self.mustMashCtrl.IsChecked:
            thisGrain.mush_mash = True
        else:
            thisGrain.mush_mash = False
        if self.addAfterBoilCtrl.IsChecked():
            thisGrain.add_after_boil = True
        else:
            thisGrain.add_after_boil = False        
        if self.notesCtrl.IsModified():
            thisGrain.notes = self.notesCtrl.GetValue()   
        
        self.ingredientID = thisGrain.id

    def PopulateBrowser(self):
        base_list = ['Hops','Grains','Extracts','Yeasts','Miscellaneous']
        base_list.sort()

        for base_type in base_list:
            self.topLevelCtrl.InsertStringItem(sys.maxint, base_type)

    def NewIngredient(self, event): # wxGlade: IngredientEditor.<event_handler>
        if self.itemModified:
            self._SaveItem()
        
        self._ClearField()
        self.ingredientType = "Grain"
        

    def AddInventory(self, event): # wxGlade: IngredientEditor.<event_handler>
        print "Event handler `AddInventory' not implemented!"
        event.Skip()

    def ViewInventory(self, event): # wxGlade: IngredientEditor.<event_handler>
        print "Event handler `ViewInventory' not implemented!"
        event.Skip()

    def ItemChanged(self, event): # wxGlade: IngredientEditor.<event_handler>
        self.itemModified = True
        if self.saveInterval:
            pass
        else:
            self.saveInterval = wx.FutureCall(2000, self._SaveItem)
        event.Skip()


# end of class IngredientEditor


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    ingredientEditor = IngredientEditor(None, -1, "")
    app.SetTopWindow(ingredientEditor)
    ingredientEditor.Show()
    app.MainLoop()
    SRM_QUANT = Decimal(10) ** -2
    SG_QUANT = Decimal(10) ** -4
    PERCENT_QUANT = Decimal(10) ** -2